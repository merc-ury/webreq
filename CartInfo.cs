// Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CartInfo
    {
        [JsonProperty("token")]
        public string Token { get; set; }

        [JsonProperty("note")]
        public object Note { get; set; }

        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }

        [JsonProperty("original_total_price")]
        public long OriginalTotalPrice { get; set; }

        [JsonProperty("total_price")]
        public long TotalPrice { get; set; }

        [JsonProperty("total_discount")]
        public long TotalDiscount { get; set; }

        [JsonProperty("total_weight")]
        public double TotalWeight { get; set; }

        [JsonProperty("item_count")]
        public long ItemCount { get; set; }

        [JsonProperty("items")]
        public Item[] Items { get; set; }

        [JsonProperty("requires_shipping")]
        public bool RequiresShipping { get; set; }

        [JsonProperty("currency")]
        public string Currency { get; set; }

        [JsonProperty("items_subtotal_price")]
        public long ItemsSubtotalPrice { get; set; }

        [JsonProperty("cart_level_discount_applications")]
        public object[] CartLevelDiscountApplications { get; set; }
    }

    public partial class Attributes
    {
    }

    public partial class Item
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("properties")]
        public Attributes Properties { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("variant_id")]
        public long VariantId { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("price")]
        public long Price { get; set; }

        [JsonProperty("original_price")]
        public long OriginalPrice { get; set; }

        [JsonProperty("discounted_price")]
        public long DiscountedPrice { get; set; }

        [JsonProperty("line_price")]
        public long LinePrice { get; set; }

        [JsonProperty("original_line_price")]
        public long OriginalLinePrice { get; set; }

        [JsonProperty("total_discount")]
        public long TotalDiscount { get; set; }

        [JsonProperty("discounts")]
        public object[] Discounts { get; set; }

        [JsonProperty("sku")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Sku { get; set; }

        [JsonProperty("grams")]
        public long Grams { get; set; }

        [JsonProperty("vendor")]
        public Vendor Vendor { get; set; }

        [JsonProperty("taxable")]
        public bool Taxable { get; set; }

        [JsonProperty("product_id")]
        public long ProductId { get; set; }

        [JsonProperty("product_has_only_default_variant")]
        public bool ProductHasOnlyDefaultVariant { get; set; }

        [JsonProperty("gift_card")]
        public bool GiftCard { get; set; }

        [JsonProperty("final_price")]
        public long FinalPrice { get; set; }

        [JsonProperty("final_line_price")]
        public long FinalLinePrice { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("featured_image")]
        public FeaturedImage FeaturedImage { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("handle")]
        public Handle Handle { get; set; }

        [JsonProperty("requires_shipping")]
        public bool RequiresShipping { get; set; }

        [JsonProperty("product_type")]
        public ProductType ProductType { get; set; }

        [JsonProperty("product_title")]
        public ProductTitle ProductTitle { get; set; }

        [JsonProperty("product_description")]
        public string ProductDescription { get; set; }

        [JsonProperty("variant_title")]
        public string VariantTitle { get; set; }

        [JsonProperty("variant_options")]
        public string[] VariantOptions { get; set; }

        [JsonProperty("options_with_values")]
        public OptionsWithValue[] OptionsWithValues { get; set; }

        [JsonProperty("line_level_discount_allocations")]
        public object[] LineLevelDiscountAllocations { get; set; }

        [JsonProperty("line_level_total_discount")]
        public long LineLevelTotalDiscount { get; set; }
    }

    public partial class FeaturedImage
    {
        [JsonProperty("aspect_ratio")]
        public double AspectRatio { get; set; }

        [JsonProperty("alt")]
        public Alt Alt { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }
    }

    public partial class OptionsWithValue
    {
        [JsonProperty("name")]
        public Name Name { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public enum Alt { NikeAirMax90RoyalBlueCd0881102JimmyJazz };

    public enum Handle { NikeAirMax90RoyalCd0881102 };

    public enum Name { Size };

    public enum ProductTitle { AirMax90Royal };

    public enum ProductType { The1143FootwearMensNswRunning };

    public enum Vendor { Nike };

    public partial class CartInfo
    {
        public static CartInfo FromJson(string json) => JsonConvert.DeserializeObject<CartInfo>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CartInfo self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                AltConverter.Singleton,
                HandleConverter.Singleton,
                NameConverter.Singleton,
                ProductTitleConverter.Singleton,
                ProductTypeConverter.Singleton,
                VendorConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AltConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Alt) || t == typeof(Alt?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Nike  Air Max 90 Royal  Blue - CD0881-102 | Jimmy Jazz")
            {
                return Alt.NikeAirMax90RoyalBlueCd0881102JimmyJazz;
            }
            throw new Exception("Cannot unmarshal type Alt");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Alt)untypedValue;
            if (value == Alt.NikeAirMax90RoyalBlueCd0881102JimmyJazz)
            {
                serializer.Serialize(writer, "Nike  Air Max 90 Royal  Blue - CD0881-102 | Jimmy Jazz");
                return;
            }
            throw new Exception("Cannot marshal type Alt");
        }

        public static readonly AltConverter Singleton = new AltConverter();
    }

    internal class HandleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Handle) || t == typeof(Handle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "nike-air-max-90-royal-cd0881-102")
            {
                return Handle.NikeAirMax90RoyalCd0881102;
            }
            throw new Exception("Cannot unmarshal type Handle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Handle)untypedValue;
            if (value == Handle.NikeAirMax90RoyalCd0881102)
            {
                serializer.Serialize(writer, "nike-air-max-90-royal-cd0881-102");
                return;
            }
            throw new Exception("Cannot marshal type Handle");
        }

        public static readonly HandleConverter Singleton = new HandleConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Size")
            {
                return Name.Size;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            if (value == Name.Size)
            {
                serializer.Serialize(writer, "Size");
                return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class ProductTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProductTitle) || t == typeof(ProductTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Air Max 90 Royal")
            {
                return ProductTitle.AirMax90Royal;
            }
            throw new Exception("Cannot unmarshal type ProductTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProductTitle)untypedValue;
            if (value == ProductTitle.AirMax90Royal)
            {
                serializer.Serialize(writer, "Air Max 90 Royal");
                return;
            }
            throw new Exception("Cannot marshal type ProductTitle");
        }

        public static readonly ProductTitleConverter Singleton = new ProductTitleConverter();
    }

    internal class ProductTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProductType) || t == typeof(ProductType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "1143 - Footwear - Mens NSW - Running")
            {
                return ProductType.The1143FootwearMensNswRunning;
            }
            throw new Exception("Cannot unmarshal type ProductType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProductType)untypedValue;
            if (value == ProductType.The1143FootwearMensNswRunning)
            {
                serializer.Serialize(writer, "1143 - Footwear - Mens NSW - Running");
                return;
            }
            throw new Exception("Cannot marshal type ProductType");
        }

        public static readonly ProductTypeConverter Singleton = new ProductTypeConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class VendorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Vendor) || t == typeof(Vendor?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Nike")
            {
                return Vendor.Nike;
            }
            throw new Exception("Cannot unmarshal type Vendor");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Vendor)untypedValue;
            if (value == Vendor.Nike)
            {
                serializer.Serialize(writer, "Nike");
                return;
            }
            throw new Exception("Cannot marshal type Vendor");
        }

        public static readonly VendorConverter Singleton = new VendorConverter();
    }
}
